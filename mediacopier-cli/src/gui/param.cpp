/* Copyright (C) 2022 Patrick Ziegler
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "gui/param.hpp"
#include "core/config.hpp"

#include <QAbstractButton>
#include <QFileDialog>

#include <spdlog/spdlog.h>

// auto generated by moc
#include "ui_param.h"

const auto ask_for_directory = [](const QString& title) -> QString
{
    return QFileDialog::getExistingDirectory(
                0, title, QDir::currentPath(),
                QFileDialog::ShowDirsOnly | QFileDialog::DontResolveSymlinks);
};

static const QList<Config::Command> commands = {
    Config::Command::COPY_JPEG,
    Config::Command::MOVE_JPEG,
    Config::Command::SIMULATE
};

MediaCopierParam::MediaCopierParam(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::MediaCopierParam)
{
    ui->setupUi(this);

    Q_FOREACH(Config::Command item, commands) {
        ui->paramCommand->addItem(Config::commandString(item));
    }
}

MediaCopierParam::~MediaCopierParam()
{
    delete ui;
}

void MediaCopierParam::init(std::shared_ptr<Config> config)
{
    this->config = std::move(config);

    syncConfig();

    connect(ui->dirsInputDirButton, &QDialogButtonBox::clicked,
            this, &MediaCopierParam::onOpenInputDirClicked);

    connect(ui->dirsOutputDirButton, &QDialogButtonBox::clicked,
            this, &MediaCopierParam::onOpenOutputDirClicked);

    connect(ui->dirsInputDirText, &QLineEdit::textChanged,
            this, &MediaCopierParam::onInputDirChanged);

    connect(ui->dirsOutputDirText, &QLineEdit::textChanged,
            this, &MediaCopierParam::onOutputDirChanged);

    connect(ui->paramPattern, &QLineEdit::textChanged,
            this, &MediaCopierParam::onPatternChanged);

    connect(ui->paramCommand, QOverload<int>::of(&QComboBox::currentIndexChanged),
            this, &MediaCopierParam::onCommandChanged);
}

void MediaCopierParam::syncConfig()
{
    ui->dirsInputDirText->setText(QString::fromStdString(config->inputDir().string()));
    ui->dirsOutputDirText->setText(QString::fromStdString(config->outputDir().string()));
    ui->paramPattern->setText(config->pattern().c_str());

    for (int i = 0; i < commands.length(); ++i) {
        if (commands.at(i) == config->command()) {
            ui->paramCommand->setCurrentIndex(i);
            break;
        }
    }
}

void MediaCopierParam::onOpenInputDirClicked()
{
    ui->dirsInputDirText->setText(ask_for_directory(QObject::tr("Source folder")));
}

void MediaCopierParam::onOpenOutputDirClicked()
{
    ui->dirsOutputDirText->setText(ask_for_directory(QObject::tr("Destination folder")));
}

void MediaCopierParam::onInputDirChanged(const QString& text)
{
    config->setInputDir(text);
    spdlog::debug("Changed input dir to " + config->outputDir().string());
}

void MediaCopierParam::onOutputDirChanged(const QString& text)
{
    config->setOutputDir(text);
    spdlog::debug("Changed output dir to " + config->outputDir().string());
    config->readConfigFile();
    syncConfig();
}

void MediaCopierParam::onPatternChanged(const QString& text)
{
    config->setPattern(text);
    spdlog::debug("Changed pattern to " + config->pattern());
}

void MediaCopierParam::onCommandChanged(int index)
{
    config->setCommand(commands.at(index));
    spdlog::debug("Changed command to " + Config::commandString(commands.at(index)).toStdString());
}

/* Copyright (C) 2022 Patrick Ziegler
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "dialog.hpp"

#include <mediacopier/version.hpp>

#include <QApplication>
#include <QFinalState>
#include <QPushButton>
#include <QScreen>

#include <spdlog/spdlog.h>
#include <spdlog/sinks/basic_file_sink.h>
#include <spdlog/sinks/qt_sinks.h>

// auto generated by moc
#include "ui_dialog.h"

static constexpr const size_t DEFAULT_DIALOG_WIDTH = 600;
static constexpr const size_t DEFAULT_DIALOG_HEIGHT = 600;
static constexpr const unsigned int DEFAULT_WAIT_MS = 200;

MediaCopierDialog::MediaCopierDialog(QWidget *parent) :
    QDialog(parent), ui(new Ui::MediaCopierDialog)
{
    ui->setupUi(this);
    this->setWindowTitle(mediacopier::MEDIACOPIER_PROJECT_NAME);
    this->resize(DEFAULT_DIALOG_WIDTH, DEFAULT_DIALOG_HEIGHT);
    move(screen()->geometry().center() - frameGeometry().center());

    auto sink = std::make_shared<spdlog::sinks::qt_sink_st>(ui->logText, "appendPlainText");
    spdlog::default_logger()->sinks().push_back(std::move(sink));
}

MediaCopierDialog::~MediaCopierDialog()
{
    delete ui;
}

void MediaCopierDialog::init(std::shared_ptr<Config> config, QApplication& app)
{
    QObject::connect(&app, &QApplication::aboutToQuit, this, &MediaCopierDialog::aboutToQuit);

    this->config = std::move(config);
    ui->param->init(this->config);

    fsm = std::make_unique<QStateMachine>();

    auto s1 = new QState();         // waiting for input
    auto s2 = new QState();         // executing operation
    auto s3 = new QState();         // aborting operation
    auto s4 = new QFinalState();    // closing dialog

    s1->addTransition(ui->dialogButtonBox, &QDialogButtonBox::accepted, s2);
    s1->addTransition(ui->dialogButtonBox, &QDialogButtonBox::rejected, s4);
    s2->addTransition(ui->dialogButtonBox, &QDialogButtonBox::rejected, s3);
    s2->addTransition(this, &MediaCopierDialog::rejected, s3);
    s2->addTransition(this, &MediaCopierDialog::operationDone, s1);
    s3->addTransition(this, &MediaCopierDialog::operationDone, s1);

    auto m_btnOk = ui->dialogButtonBox->button(QDialogButtonBox::Ok);
    auto m_btnCancel = ui->dialogButtonBox->button(QDialogButtonBox::Cancel);

    s1->assignProperty(m_btnOk, "enabled", true);
    s1->assignProperty(m_btnCancel, "enabled", true);
    s2->assignProperty(m_btnOk, "enabled", false);
    s3->assignProperty(m_btnCancel, "enabled", false);

    QObject::connect(s1, &QState::entered, this, &MediaCopierDialog::awaitOperation);
    QObject::connect(s2, &QState::entered, this, &MediaCopierDialog::startOperation);
    QObject::connect(s3, &QState::entered, this, &MediaCopierDialog::cancelOperation);
    QObject::connect(fsm.get(), &QStateMachine::finished, this, &MediaCopierDialog::close);

    fsm->addState(s1);
    fsm->addState(s2);
    fsm->addState(s3);
    fsm->addState(s4);
    fsm->setInitialState(s1);
    fsm->start();
}

void MediaCopierDialog::aboutToQuit()
{
    while (fsm->active())
        this->thread()->msleep(DEFAULT_WAIT_MS);
}

void MediaCopierDialog::update(Status info)
{
    ui->logProgressBar->setMaximum(info.fileCount());
    ui->logProgressBar->setValue(info.progress());
}

void MediaCopierDialog::startOperation()
{
    worker = std::make_shared<Worker>(*config);

    QObject::connect(worker.get(), &Worker::status, this, &MediaCopierDialog::update);
    QObject::connect(worker.get(), &Worker::finished, this, &MediaCopierDialog::operationDone);

    if (spdlog::default_logger()->sinks().size() > 2) {
        spdlog::default_logger()->sinks().pop_back();
    }
    auto logfile = config->outputDir() / ".mediacopier-log";
    spdlog::default_logger()->sinks().push_back(
                std::make_shared<spdlog::sinks::basic_file_sink_mt>(logfile.string(), true));

    worker->start();
}

void MediaCopierDialog::cancelOperation()
{
    worker->kill();
}

void MediaCopierDialog::awaitOperation()
{
    spdlog::default_logger()->flush();
}

/* Copyright (C) 2022 Patrick Ziegler <zipat@proton.me>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "widgets/MediaCopierDialogSlim.hpp"

#include <mediacopier/version.hpp>

#include <QApplication>
#include <QFinalState>
#include <QPushButton>
#include <QScreen>

#include <spdlog/spdlog.h>
#include <spdlog/sinks/basic_file_sink.h>

// auto generated by moc
#include "ui_MediaCopierDialogSlim.h"

static constexpr const size_t DEFAULT_DIALOG_WIDTH = 700;
static constexpr const size_t DEFAULT_DIALOG_HEIGHT = 200;
static constexpr const unsigned int DEFAULT_WAIT_MS = 200;

const char* stringSource() { return QT_TRANSLATE_NOOP("Strings", "Source"); }
const char* stringDestination() { return QT_TRANSLATE_NOOP("Strings", "Destination"); }

MediaCopierDialogSlim::MediaCopierDialogSlim(QWidget *parent) :
    QDialog(parent), ui(new Ui::MediaCopierDialogSlim)
{
    ui->setupUi(this);
    this->resize(DEFAULT_DIALOG_WIDTH, DEFAULT_DIALOG_HEIGHT);
    this->setWindowTitle(mediacopier::MEDIACOPIER_PROJECT_NAME);
    move(screen()->geometry().center() - frameGeometry().center());
    fsm = new QStateMachine(this);
}

MediaCopierDialogSlim::~MediaCopierDialogSlim()
{
    delete ui;
}

void MediaCopierDialogSlim::init(std::shared_ptr<Config> config, std::unique_ptr<WorkerFactory> factory)
{
    m_config = std::move(config);
    m_factory = std::move(factory);
    ui->param->init(m_config);

    auto s1 = new QState(fsm);         // waiting for input
    auto s2 = new QState(fsm);         // checking parameters
    auto s3 = new QState(fsm);         // executing operation
    auto s4 = new QFinalState(fsm);    // closing dialog

    s1->addTransition(ui->dialogButtonBox, &QDialogButtonBox::accepted, s2);
    s1->addTransition(ui->dialogButtonBox, &QDialogButtonBox::rejected, s4);
    s2->addTransition(ui->param, &MediaCopierParamWidget::validParameters, s3);
    s2->addTransition(ui->param, &MediaCopierParamWidget::invalidParameters, s1);
    s3->addTransition(this, &MediaCopierDialogSlim::finishedOperation, s4);

    QObject::connect(s2, &QState::entered, ui->param, &MediaCopierParamWidget::validateParameters);
    QObject::connect(s3, &QState::entered, this, &MediaCopierDialogSlim::hide);
    QObject::connect(s3, &QState::entered, this, &MediaCopierDialogSlim::startOperation);
    QObject::connect(fsm, &QStateMachine::finished, this, &MediaCopierDialogSlim::close);

    fsm->setInitialState(s1);
    fsm->start();
}

void MediaCopierDialogSlim::startOperation()
{
    auto description = ui->param->getCommandDescription(m_config->getCommand());
    m_worker = m_factory->make_worker(description);
    QObject::connect(m_worker.get(), &Worker::finished, this, &MediaCopierDialogSlim::finishedOperation);
    m_worker->start();
}

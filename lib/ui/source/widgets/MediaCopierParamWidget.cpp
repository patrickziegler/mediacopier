/* Copyright (C) 2022 Patrick Ziegler <zipat@proton.me>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "widgets/MediaCopierParamWidget.hpp"

#include <QAbstractButton>
#include <QFileDialog>
#include <QCheckBox>

#include <spdlog/spdlog.h>

// auto generated by moc
#include "ui_MediaCopierParamWidget.h"

static const auto ask_for_directory(const QString& title, const QDir& dir) -> QString
{
    return QFileDialog::getExistingDirectory(
                0, title, dir.absolutePath(), QFileDialog::ShowDirsOnly | QFileDialog::DontResolveSymlinks);
}

static const auto ask_for_directory(const QString& title) -> QString
{
    return ask_for_directory(title, QDir::currentPath());
}

static const QList<QPair<QString, Config::Timezone>> paramTimezoneItems = {
    QPair<QString, Config::Timezone>(QT_TRANSLATE_NOOP("MediaCopierParamWidget", "Universal time (UTC)"), Config::Timezone::Universal),
    QPair<QString, Config::Timezone>(QT_TRANSLATE_NOOP("MediaCopierParamWidget", "Local time"), Config::Timezone::Local)

};

static const QList<QPair<QString, Config::Command>> paramCommandItems = {
    QPair<QString, Config::Command>(QT_TRANSLATE_NOOP("MediaCopierParamWidget", "Copy"), Config::Command::Copy),
    QPair<QString, Config::Command>(QT_TRANSLATE_NOOP("MediaCopierParamWidget", "Move"), Config::Command::Move)
};

static int getTimezoneIndex(const Config::Timezone& timezone) {
    for (int i = 0; i < paramTimezoneItems.length(); ++i) {
        if (paramTimezoneItems.at(i).second == timezone) {
            return i;
        }
    }
    return -1;
}

static int getCommandIndex(const Config::Command& command) {
    for (int i = 0; i < paramCommandItems.length(); ++i) {
        if (paramCommandItems.at(i).second == command) {
            return i;
        }
    }
    return -1;
}

MediaCopierParamWidget::MediaCopierParamWidget(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::MediaCopierParamWidget)
{
    ui->setupUi(this);
    for (const auto& item : paramCommandItems) {
        ui->paramCommand->addItem(tr(item.first.toStdString().c_str()));
    }
    for (const auto& item : paramTimezoneItems) {
        ui->paramTimezone->addItem(tr(item.first.toStdString().c_str()));
    }
    ui->paramPattern->setEnabled(false);
    ui->paramTimezone->setEnabled(false);
}

MediaCopierParamWidget::~MediaCopierParamWidget()
{
    delete ui;
}

void MediaCopierParamWidget::init(std::shared_ptr<Config> config)
{
    m_config = std::move(config);

    ui->dirsInputDirText->setText(QString::fromStdString(m_config->getInputDir().string()));
    ui->dirsOutputDirText->setText(QString::fromStdString(m_config->getOutputDir().string()));
    ui->paramPattern->setText(m_config->getPattern().c_str());
    ui->paramTimezone->setCurrentIndex(getTimezoneIndex(m_config->getTimezone()));
    ui->paramCommand->setCurrentIndex(getCommandIndex(m_config->getCommand()));

    connect(ui->dirsInputDirButton, &QToolButton::clicked,
            this, &MediaCopierParamWidget::onOpenInputDirClicked);

    connect(ui->dirsOutputDirButton, &QToolButton::clicked,
            this, &MediaCopierParamWidget::onOpenOutputDirClicked);

    connect(ui->paramPatternUpdate, &QCheckBox::clicked,
            this, &MediaCopierParamWidget::onPatternUpdateClicked);

    connect(ui->dirsInputDirText, &QLineEdit::textChanged,
            this, &MediaCopierParamWidget::onInputDirChanged);

    connect(ui->dirsOutputDirText, &QLineEdit::textChanged,
            this, &MediaCopierParamWidget::onOutputDirChanged);

    connect(ui->paramPattern, &QLineEdit::textChanged,
            this, &MediaCopierParamWidget::onPatternChanged);

    connect(ui->paramTimezone, QOverload<int>::of(&QComboBox::currentIndexChanged),
            this, &MediaCopierParamWidget::onTimezoneChanged);

    connect(ui->paramCommand, QOverload<int>::of(&QComboBox::currentIndexChanged),
            this, &MediaCopierParamWidget::onCommandChanged);
}

void MediaCopierParamWidget::validateParameters()
{
    bool result = true;

    QPalette errorPalette;
    errorPalette.setColor(QPalette::Base, QColor("#ff7d7d"));
    errorPalette.setColor(QPalette::Text, Qt::white);

    if (ui->dirsInputDirText->text().isEmpty() || !QDir(ui->dirsInputDirText->text()).exists()) {
        ui->dirsInputDirText->setPalette(errorPalette);
        result = false;
    } else {
        ui->dirsInputDirText->setPalette(this->style()->standardPalette());
    }

    if (ui->dirsOutputDirText->text().isEmpty() || !QDir(ui->dirsOutputDirText->text()).makeAbsolute()) {
        ui->dirsOutputDirText->setPalette(errorPalette);
        result = false;
    } else {
        ui->dirsOutputDirText->setPalette(this->style()->standardPalette());
    }

    if (ui->paramPattern->text().isEmpty()) {
        ui->paramPattern->setPalette(errorPalette);
        result = false;
    } else {
        ui->paramPattern->setPalette(this->style()->standardPalette());
    }

    if (result) {
        validParameters();
    } else {
        spdlog::error("Missing parameters, cannot start yet!");
        invalidParameters();
    }
}

void MediaCopierParamWidget::onOpenInputDirClicked()
{
    ui->dirsInputDirText->setText(ask_for_directory(tr("Source folder")));
}

void MediaCopierParamWidget::onOpenOutputDirClicked()
{
    QDir inputDir{ui->dirsInputDirText->text()};
    if (inputDir.exists()) {
        ui->dirsOutputDirText->setText(ask_for_directory(tr("Destination folder"), inputDir));
    } else {
        ui->dirsOutputDirText->setText(ask_for_directory(tr("Destination folder")));
    }
}

void MediaCopierParamWidget::onPatternUpdateClicked(bool checked)
{
    ui->paramPattern->setEnabled(checked);
    ui->paramTimezone->setEnabled(checked);
    if (!checked) {
        // revert to defaults as given in the config file or original defaults (built-in)
        m_config->resetPattern();
        m_config->resetTimezone();
        m_config->readConfigFile();
        ui->paramPattern->setText(m_config->getPattern().c_str());
        ui->paramTimezone->setCurrentIndex(getTimezoneIndex(m_config->getTimezone()));
    } else {
        // this ensures that the current values won't be overridden by defaults later
        m_config->setPattern(ui->paramPattern->text());
        m_config->setTimezone(paramTimezoneItems.at(ui->paramTimezone->currentIndex()).second);
    }
}

void MediaCopierParamWidget::onInputDirChanged(const QString& text)
{
    m_config->setInputDir(text);
    spdlog::debug("Changed input dir to '" + m_config->getOutputDir().string() + "'");
}

void MediaCopierParamWidget::onOutputDirChanged(const QString& text)
{
    m_config->setOutputDir(text);
    spdlog::debug("Changed output dir to '" + m_config->getOutputDir().string() + "'");
    m_config->readConfigFile(); // this will only update the default values
    ui->paramPattern->setText(m_config->getPattern().c_str());
    ui->paramTimezone->setCurrentIndex(getTimezoneIndex(m_config->getTimezone()));
}

void MediaCopierParamWidget::onPatternChanged(const QString& text)
{
    // without this check, we wouldn't be able to fall back to defaults
    if (m_config->getPattern() != text.toStdString()) {
        m_config->setPattern(text);
        spdlog::debug("Changed pattern to '" + m_config->getPattern() + "'");
    }
}

void MediaCopierParamWidget::onTimezoneChanged(int index)
{
    const auto& [description, timezone] = paramTimezoneItems.at(index);
    // without this check, we wouldn't be able to fall back to defaults
    if (m_config->getTimezone() != timezone) {
        m_config->setTimezone(timezone);
        spdlog::debug("Changed timezone to '" + description.toStdString() + "'");
    }
}

void MediaCopierParamWidget::onCommandChanged(int index)
{
    const auto& [description, command] = paramCommandItems.at(index);
    m_config->setCommand(command);
    spdlog::debug("Changed command to '" + description.toStdString() + "'");
}

QString MediaCopierParamWidget::getCommandDescription(const Config::Command& command) const {
    for (const auto& [d, c] : paramCommandItems) {
        if (c == command) {
            return tr(d.toStdString().c_str());
        }
    }
    return {};
}
